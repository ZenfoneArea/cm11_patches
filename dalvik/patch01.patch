diff --git a/dx/src/com/android/dx/dex/cf/CfTranslator.java b/dx/src/com/android/dx/dex/cf/CfTranslator.java
index 92ea0f7..8ab1c84 100644
--- a/dx/src/com/android/dx/dex/cf/CfTranslator.java
+++ b/dx/src/com/android/dx/dex/cf/CfTranslator.java
@@ -142,18 +142,20 @@ public class CfTranslator {
         ConstantPool constantPool = cf.getConstantPool();
         int constantPoolSize = constantPool.size();
 
-        for (int i = 0; i < constantPoolSize; i++) {
-            Constant constant = constantPool.getOrNull(i);
-            if (constant instanceof CstMethodRef) {
-                methodIdsSection.intern((CstBaseMethodRef) constant);
-            } else if (constant instanceof CstInterfaceMethodRef) {
-                methodIdsSection.intern(((CstInterfaceMethodRef) constant).toMethodRef());
-            } else if (constant instanceof CstFieldRef) {
-                fieldIdsSection.intern((CstFieldRef) constant);
-            } else if (constant instanceof CstEnumRef) {
-                fieldIdsSection.intern(((CstEnumRef) constant).getFieldRef());
-            } else if (constant instanceof CstType) {
-                typeIdsSection.intern((CstType) constant);
+        synchronized (dexFile) {
+            for (int i = 0; i < constantPoolSize; i++) {
+                Constant constant = constantPool.getOrNull(i);
+                if (constant instanceof CstMethodRef) {
+                    methodIdsSection.intern((CstBaseMethodRef) constant);
+                } else if (constant instanceof CstInterfaceMethodRef) {
+                    methodIdsSection.intern(((CstInterfaceMethodRef) constant).toMethodRef());
+                } else if (constant instanceof CstFieldRef) {
+                    fieldIdsSection.intern((CstFieldRef) constant);
+                } else if (constant instanceof CstEnumRef) {
+                    fieldIdsSection.intern(((CstEnumRef) constant).getFieldRef());
+                } else if (constant instanceof CstType) {
+                    typeIdsSection.intern((CstType) constant);
+                }
             }
         }
 
@@ -195,7 +197,9 @@ public class CfTranslator {
                 if (annotations.size() != 0) {
                     out.addFieldAnnotations(field, annotations);
                 }
-                fieldIdsSection.intern(field);
+                synchronized (fieldIdsSection) {
+                    fieldIdsSection.intern(field);
+                }
             } catch (RuntimeException ex) {
                 String msg = "...while processing " + one.getName().toHuman() +
                     " " + one.getDescriptor().toHuman();
@@ -364,7 +368,9 @@ public class CfTranslator {
                 if (list.size() != 0) {
                     out.addParameterAnnotations(meth, list);
                 }
-                methodIds.intern(meth);
+                synchronized (methodIds) {
+                  methodIds.intern(meth);
+                }
             } catch (RuntimeException ex) {
                 String msg = "...while processing " + one.getName().toHuman() +
                     " " + one.getDescriptor().toHuman();
diff --git a/libdex/Android.mk b/libdex/Android.mk
index 81deb64..d0c87e5 100644
--- a/libdex/Android.mk
+++ b/libdex/Android.mk
@@ -61,6 +61,10 @@ LOCAL_CFLAGS += -DALLOW_DEXROOT_ON_CACHE
 endif
 
 #LOCAL_CFLAGS += -UNDEBUG -DDEBUG=1
+ifneq ($(findstring -O3, $(TARGET_GLOBAL_CFLAGS)),)
+# Workaround for https://bugs.launchpad.net/linaro-android/+bug/948255
+LOCAL_CFLAGS += -fno-inline-functions
+endif
 LOCAL_SRC_FILES := $(dex_src_files)
 LOCAL_C_INCLUDES += $(dex_include_files)
 LOCAL_STATIC_LIBRARIES := liblog
diff --git a/vm/Android.mk b/vm/Android.mk
index bdd164e..3bc8c1f 100644
--- a/vm/Android.mk
+++ b/vm/Android.mk
@@ -156,6 +156,9 @@ ifeq ($(WITH_HOST_DALVIK),true)
     ifeq ($(TARGET_ARCH_LOWMEM),true)
       LOCAL_CFLAGS += -DDALVIK_LOWMEM
     endif
+    ifeq ($(HOST_ARCH),x86)
+        LOCAL_CFLAGS += -mmmx -msse
+    endif
     LOCAL_MODULE_TAGS := optional
     LOCAL_MODULE := libdvm
 
diff --git a/vm/Dvm.mk b/vm/Dvm.mk
index 7c99255..a2c0ee9 100644
--- a/vm/Dvm.mk
+++ b/vm/Dvm.mk
@@ -44,6 +44,11 @@ ifneq ($(strip $(DEBUG_DALVIK_VM)),)
   dvm_make_debug_vm := $(DEBUG_DALVIK_VM)
 endif
 
+# Disable x86-atom variant
+ifeq ($(dvm_arch_variant),x86-atom)
+dvm_arch_variant := x86
+endif
+
 ifeq ($(dvm_make_debug_vm),true)
   #
   # "Debug" profile:
@@ -203,6 +208,11 @@ ifeq ($(WITH_COPYING_GC),true)
   LOCAL_SRC_FILES += \
 	alloc/Copying.cpp.arm
 else
+# To customize dlmalloc's alignment, set BOARD_MALLOC_ALIGNMENT in
+# the appropriate BoardConfig.mk file.
+  ifneq ($(BOARD_MALLOC_ALIGNMENT),)
+     LOCAL_CFLAGS += -DMALLOC_ALIGNMENT=$(BOARD_MALLOC_ALIGNMENT)
+  endif
   LOCAL_SRC_FILES += \
 	alloc/DlMalloc.cpp \
 	alloc/HeapSource.cpp \
diff --git a/vm/Jni.cpp b/vm/Jni.cpp
index b12a49f..be9c288 100644
--- a/vm/Jni.cpp
+++ b/vm/Jni.cpp
@@ -703,6 +703,14 @@ static void throwNoSuchMethodError(ClassObject* c, const char* name, const char*
     dvmThrowNoSuchMethodError(msg.c_str());
 }
 
+#ifdef WITH_HOUDINI
+namespace houdini {
+bool hookCheckMethod(void *fnPtr);
+void dvmHookPlatformInvoke(void* pEnv, void* clazz, int argInfo, int argc,
+    const int* argv, const char* shorty, void* func, void* pReturn);
+}
+#endif
+
 /*
  * Register a method that uses JNI calling conventions.
  */
@@ -762,6 +770,10 @@ static bool dvmRegisterJNIMethod(ClassObject* clazz, const char* methodName,
         ALOGV("Note: %s.%s:%s was already registered", clazz->descriptor, methodName, signature);
     }
 
+#ifdef WITH_HOUDINI
+    method->needHoudini = houdini::hookCheckMethod(fnPtr);
+#endif
+
     method->fastJni = fastJni;
     dvmUseJNIBridge(method, fnPtr);
 
@@ -1153,6 +1165,13 @@ void dvmCallJNIMethod(const u4* args, JValue* pResult, const Method* method, Thr
 
     JNIEnv* env = self->jniEnv;
     COMPUTE_STACK_SUM(self);
+#ifdef WITH_HOUDINI
+    if (dvmNeedHoudiniMethod(method))
+        houdini::dvmHookPlatformInvoke(env, (ClassObject*)staticMethodClass,
+            method->jniArgInfo, method->insSize, (const int*)modArgs, method->shorty,
+            (void*)method->insns, pResult);
+    else
+#endif
     dvmPlatformInvoke(env,
             (ClassObject*) staticMethodClass,
             method->jniArgInfo, method->insSize, modArgs, method->shorty,
diff --git a/vm/Native.cpp b/vm/Native.cpp
index a12c4e0..3d4e9e1 100644
--- a/vm/Native.cpp
+++ b/vm/Native.cpp
@@ -29,6 +29,26 @@
 static void freeSharedLibEntry(void* ptr);
 static void* lookupSharedLibMethod(const Method* method);
 
+#ifdef WITH_HOUDINI
+/*
+ * Pointer to hold Houdini Hook structure defined in libhoudini_hook.a
+ */
+void *gHoudiniHook = NULL;
+
+namespace houdini {
+void* hookDlopen(const char* filename, int flag, bool* useHoudini);
+void* hookDlsym(bool useHoudini, void* handle, const char* symbol);
+int hookJniOnload(bool useHoudini, void* func, void* jniVm, void* arg);
+}
+/*
+ * Get the shorty string for a method.
+ */
+const char* dvmGetMethodShorty(void* method)
+{
+    const Method* meth = (const Method*)method;
+    return meth->shorty;
+}
+#endif
 
 /*
  * Initialize the native code loader.
@@ -156,6 +176,9 @@ struct SharedLib {
     pthread_cond_t  onLoadCond;     /* wait for JNI_OnLoad in other thread */
     u4              onLoadThreadId; /* recursive invocation guard */
     OnLoadState     onLoadResult;   /* result of earlier JNI_OnLoad */
+#ifdef WITH_HOUDINI
+    bool        useHoudini;
+#endif
 };
 
 /*
@@ -380,12 +403,23 @@ bool dvmLoadNativeCode(const char* pathName, Object* classLoader,
      */
     Thread* self = dvmThreadSelf();
     ThreadStatus oldStatus = dvmChangeStatus(self, THREAD_VMWAIT);
+#ifdef WITH_HOUDINI
+    bool useHoudini = false;
+    handle = houdini::hookDlopen(pathName, RTLD_LAZY, &useHoudini);
+#else
     handle = dlopen(pathName, RTLD_LAZY);
+#endif
     dvmChangeStatus(self, oldStatus);
 
     if (handle == NULL) {
         *detail = strdup(dlerror());
+#ifdef WITH_HOUDINI
+        ALOGE("%sdlopen(\"%s\") failed: %s",
+                useHoudini ? "Houdini " : "",  pathName,
+                useHoudini ? "Can't load ARM library" : *detail);
+#else
         ALOGE("dlopen(\"%s\") failed: %s", pathName, *detail);
+#endif
         return false;
     }
 
@@ -394,6 +428,9 @@ bool dvmLoadNativeCode(const char* pathName, Object* classLoader,
     pNewEntry = (SharedLib*) calloc(1, sizeof(SharedLib));
     pNewEntry->pathName = strdup(pathName);
     pNewEntry->handle = handle;
+#ifdef WITH_HOUDINI
+    pNewEntry->useHoudini = useHoudini;
+#endif
     pNewEntry->classLoader = classLoader;
     dvmInitMutex(&pNewEntry->onLoadLock);
     pthread_cond_init(&pNewEntry->onLoadCond, NULL);
@@ -415,7 +452,11 @@ bool dvmLoadNativeCode(const char* pathName, Object* classLoader,
         void* vonLoad;
         int version;
 
+#ifdef WITH_HOUDINI
+        vonLoad = houdini::hookDlsym(useHoudini, handle, "JNI_OnLoad");
+#else
         vonLoad = dlsym(handle, "JNI_OnLoad");
+#endif
         if (vonLoad == NULL) {
             ALOGD("No JNI_OnLoad found in %s %p, skipping init", pathName, classLoader);
             result = true;
@@ -434,7 +475,11 @@ bool dvmLoadNativeCode(const char* pathName, Object* classLoader,
             if (gDvm.verboseJni) {
                 ALOGI("[Calling JNI_OnLoad for \"%s\"]", pathName);
             }
+#ifdef WITH_HOUDINI
+            version = houdini::hookJniOnload(useHoudini, (void*)func, (void*)gDvmJni.jniVm, NULL);
+#else
             version = (*func)(gDvmJni.jniVm, NULL);
+#endif
             dvmChangeStatus(self, oldStatus);
             self->classLoaderOverride = prevOverride;
 
@@ -705,6 +750,10 @@ static int findMethodInLib(void* vlib, void* vmethod)
     } else
         ALOGV("+++ scanning '%s' for '%s'", pLib->pathName, meth->name);
 
+#ifdef WITH_HOUDINI
+    dvmSetHoudiniMethod((Method*)vmethod, pLib->useHoudini);
+#endif
+
     /*
      * First, we try it without the signature.
      */
@@ -718,7 +767,11 @@ static int findMethodInLib(void* vlib, void* vmethod)
         goto bail;
 
     ALOGV("+++ calling dlsym(%s)", mangleCM);
+#ifdef WITH_HOUDINI
+    func = houdini::hookDlsym(pLib->useHoudini, pLib->handle, mangleCM);
+#else
     func = dlsym(pLib->handle, mangleCM);
+#endif
     if (func == NULL) {
         mangleSig =
             createMangledSignature(&meth->prototype);
@@ -732,7 +785,11 @@ static int findMethodInLib(void* vlib, void* vmethod)
         sprintf(mangleCMSig, "%s__%s", mangleCM, mangleSig);
 
         ALOGV("+++ calling dlsym(%s)", mangleCMSig);
+#ifdef WITH_HOUDINI
+        func = houdini::hookDlsym(pLib->useHoudini, pLib->handle, mangleCMSig);
+#else
         func = dlsym(pLib->handle, mangleCMSig);
+#endif
         if (func != NULL) {
             ALOGV("Found '%s' with dlsym", mangleCMSig);
         }
diff --git a/vm/ReconfigureDvm.mk b/vm/ReconfigureDvm.mk
index 6e161c9..f3957b9 100644
--- a/vm/ReconfigureDvm.mk
+++ b/vm/ReconfigureDvm.mk
@@ -19,6 +19,11 @@ dvm_os := $(TARGET_OS)
 dvm_arch := $(TARGET_ARCH)
 dvm_arch_variant := $(TARGET_ARCH_VARIANT)
 
+# Disable x86-atom variant
+ifeq ($(dvm_arch_variant),x86-atom)
+dvm_arch_variant := x86
+endif
+
 include $(LOCAL_PATH)/Dvm.mk
 
 LOCAL_SHARED_LIBRARIES += \
@@ -30,8 +35,15 @@ LOCAL_SHARED_LIBRARIES += \
 	libselinux \
 	libz
 
+ifeq ($(INTEL_HOUDINI),true)
+    LOCAL_CFLAGS += -DWITH_HOUDINI
+endif
 LOCAL_STATIC_LIBRARIES += libdex
 
+ifeq ($(INTEL_HOUDINI),true)
+    LOCAL_STATIC_LIBRARIES += libhoudini_hook
+endif
+
 LOCAL_C_INCLUDES += external/stlport/stlport bionic/ bionic/libstdc++/include
 LOCAL_SHARED_LIBRARIES += libstlport
 
diff --git a/vm/alloc/HeapBitmap.cpp b/vm/alloc/HeapBitmap.cpp
index d6a737b..eeaac1b 100644
--- a/vm/alloc/HeapBitmap.cpp
+++ b/vm/alloc/HeapBitmap.cpp
@@ -179,7 +179,7 @@ void dvmHeapBitmapSweepWalk(const HeapBitmap *liveHb, const HeapBitmap *markHb,
          */
         return;
     }
-    void *pointerBuf[4 * HB_BITS_PER_WORD];
+    void *pointerBuf[8 * HB_BITS_PER_WORD];
     void **pb = pointerBuf;
     size_t start = HB_OFFSET_TO_INDEX(base - liveHb->base);
     size_t end = HB_OFFSET_TO_INDEX(max - liveHb->base);
diff --git a/vm/arch/x86/Call386ABI.S b/vm/arch/x86/Call386ABI.S
index 766aff7..7140c28 100644
--- a/vm/arch/x86/Call386ABI.S
+++ b/vm/arch/x86/Call386ABI.S
@@ -94,6 +94,11 @@ dvmPlatformInvoke:
     pushl    %esi
     pushl    %ebx
     subl     $12,%esp
+
+/* force stack alignment. In the case of already aligned SP do nothing */
+    subl     $15,%esp
+    andl     $0xfffffff0,%esp
+
 /* For 386 ABI, argInfo hints should always be valid.  Abort if not. */
     movl     16(%ebp),%ebx
     testl    %ebx,%ebx
diff --git a/vm/oo/Object.h b/vm/oo/Object.h
index 92438ba..034f74f 100644
--- a/vm/oo/Object.h
+++ b/vm/oo/Object.h
@@ -578,6 +578,9 @@ struct Method {
 
     /* set if method was called during method profiling */
     bool            inProfile;
+#ifdef WITH_HOUDINI
+    bool            needHoudini;
+#endif
 };
 
 u4 dvmGetMethodIdx(const Method* method);
@@ -691,6 +694,14 @@ INLINE bool dvmIsFinalMethod(const Method* method) {
 INLINE bool dvmIsNativeMethod(const Method* method) {
     return (method->accessFlags & ACC_NATIVE) != 0;
 }
+#ifdef WITH_HOUDINI
+INLINE void dvmSetHoudiniMethod(Method* method, bool needHoudini) {
+    method->needHoudini = needHoudini;
+}
+INLINE bool dvmNeedHoudiniMethod(const Method* method) {
+    return (method->needHoudini);
+}
+#endif
 INLINE bool dvmIsAbstractMethod(const Method* method) {
     return (method->accessFlags & ACC_ABSTRACT) != 0;
 }
